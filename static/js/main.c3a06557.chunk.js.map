{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleCopy","e","textField","document","createElement","innerText","state","password","body","appendChild","select","execCommand","remove","setState","currentState","copied","pwdLen","symbols","numbers","lowerChars","upperChars","showErrorMessage","items","i","push","value","Navbar","bg","expand","Container","Brand","href","style","marginTop","className","htmlFor","id","marginLeft","this","onChange","target","getLenOptions","type","checked","handleCheckChange","bind","name","Button","onClick","generatePassword","margin","readOnly","variant","event","n","options","syms","split","nums","chars","length","shuffle","indexPass","pass","Math","floor","random","console","log","array","randomIndex","currentIndex","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c3a06557.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Navbar, Button } from 'react-bootstrap';\nimport React from 'react';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      pwdLen: \"16\",\n      symbols: true,\n      numbers: true,\n      lowerChars: true,\n      upperChars: true,\n      password : '',\n      showErrorMessage: false,\n      copied: false\n    }\n\n  }\n  \n  getLenOptions () {\n      let items = [];         \n      for (let i = 0; i <= 128; i++) {             \n           items.push(<option key={i} value={i}>{i}</option>);   \n      }  \n      return items;\n  }\n  render(){\n\n    return (\n      <div>\n         <Navbar bg=\"light\" expand=\"lg\">\n           <Container>\n             <Navbar.Brand href=\"#home\">React-Password-Generator</Navbar.Brand>\n           </Container>\n         </Navbar>\n         <Container style={{marginTop: 20}}>\n          <div className=\"main\">\n            <form>\n              <div className=\"form-group\">\n                  <label className=\"form-label\" htmlFor=\"pwdLen\">Password Length</label>\n                  <select id=\"pwdLen\" style={{marginLeft : \"5px\"}} value={this.state.pwdLen} onChange= { (e) => {\n                    this.setState({\"pwdLen\": e.target.value})\n                  }}>\n                        {this.getLenOptions()}\n                      \n                  </select>\n              </div>\n              <div className=\"form-check\">\n                <label className=\"form-check-label\" htmlFor=\"symbols\">Include Symbols (e.g. ?!@#$%)</label>\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"symbols\" checked={this.state.symbols} onChange={this.handleCheckChange.bind(this)} name=\"symbols\" key=\"symbols\"/>\n              </div>\n              <div className=\"form-check\">\n                <label className=\"form-check-label\" htmlFor=\"numbers\">Include Numbers (e.g. 123456)</label>\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"numbers\" checked={this.state.numbers} onChange={this.handleCheckChange.bind(this)} name=\"numbers\" key=\"numbers\"/>\n              </div>\n              <div className=\"form-check\">\n                <label className=\"form-check-label\" htmlFor=\"lowerChars\">Include Lowercase Characters (e.g. abcdef)</label>\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"lowerChars\" checked={this.state.lowerChars} onChange={this.handleCheckChange.bind(this)} name=\"lowerChars\" key=\"lowerChars\"/>\n              </div>\n              <div className=\"form-check\">\n                <label className=\"form-check-label\" htmlFor=\"upperChars\">Include Uppercase Characters (e.g. ABCDEF)</label>\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"upperChars\" checked={this.state.upperChars} onChange={this.handleCheckChange.bind(this)} name=\"upperChars\" key=\"upperChars\"/>\n              </div>\n            </form>\n            <Button style={{marginTop: 10}} onClick={this.generatePassword.bind(this)}>Generate</Button>\n            <div className=\"mb-3\" style={{marginTop: 10}}>\n            {this.state.showErrorMessage && <p className=\"text-danger\">Must select at least one option</p>}\n\n                <label><strong>Your new password:</strong></label>\n                <div className=\"input-group\" style={{margin: \"10px 0px\"}}>\n                    <input type=\"text\" className=\"form-control\"  name=\"newPwd\" value={this.state.password} readOnly/>\n                    <Button variant=\"dark\" onClick={this.handleCopy.bind(this)}>Copy</Button>\n                    \n                </div>\n                <div>\n                {this.state.copied && <label className='text-success'>Copied to clipboard!</label>}\n                </div>\n            </div>\n          </div>\n         </Container>\n      </div>\n     );\n  }\n  handleCheckChange(event){\n    const target = event.target;\n    const n = target.name;    \n    this.setState(currentState => {\n      return { [n]: !currentState[n] };\n    });\n  }\n  handleCopy = (e) => {\n    const textField = document.createElement('textarea');\n    textField.innerText = this.state.password;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n    this.setState(currentState => {\n      return {...currentState, copied: true}\n    })\n  }\n  generatePassword(){\n\n    let options = [];\n    if (this.state.symbols){\n      const syms = \"!?&@#$%\".split(\"\");\n      options.push(...syms); \n    }\n    if (this.state.numbers){\n      const nums = \"0123456789\".split(\"\");\n      options.push(...nums);\n\n    }\n    if (this.state.lowerChars){\n      const chars = \"abcdefghijklmnopqrstuvwyxz\".split(\"\");\n      options.push(...chars);\n\n    }\n    if (this.state.upperChars){\n      const chars = \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\".split(\"\");\n      options.push(...chars);\n    }\n    if (options.length === 0){\n      this.setState({showErrorMessage: true});\n      return\n    }\n    else{\n      options = this.shuffle(options);\n      this.setState({showErrorMessage: false});\n\n    }\n    var indexPass = 0;\n    var pass = \"\";\n    while (indexPass < this.state.pwdLen){\n      const char = options[Math.floor(Math.random() * options.length)];\n      pass += char;\n      indexPass++;\n    }\n    console.log(pass);\n    this.setState({password: pass});\n  }\n  shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  } \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}